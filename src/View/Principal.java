/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;
import java.awt.Color;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
//import java.util.Comparator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Tile;
//import com.sun.java.swing.plaf.motif.MotifLookAndFeel;
//import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;
//import model.Map;

/**
 *
 * @author murilo
 */

public class Principal extends javax.swing.JFrame{
    
    private static boolean partida = false, chegada = false, debug = false;
    private int[] coordPartida = new int[2];
    private int[] coordChegada = new int[2];
    private int velocidadeAnimacao = 20;
    
    //Padrão -------------------------------------
    Color green = new Color(0,128,0);
    Color red = new Color(178,34,34);
    Color blue = new Color(65,105,225);
    Color brown = new Color(160,82,45);
    Color black = new Color(0,0,0);
    Color white = new Color(255, 255, 255);
    Color yellow = new Color(255, 255, 0);
    //--------------------------------------------
    //Visitados ----------------------------------
    Color visitedGreen = new Color(0, 100, 0);
    Color visitedRed = new Color(139,0,0);
    Color visitedBlue = new Color(0,0,139);
    Color visitedBrown = new Color(139,69,19);
    Color visitedYellow = new Color(255, 255, 51);
    //--------------------------------------------
    //Caminho  ----------------------------------
    Color pathGreen = new Color(50,205,50);
    Color pathRed = new Color(250, 128, 114);
    Color pathBlue = new Color(30,144,255);
    Color pathBrown = new Color(205,133,63);
    Color pathYellow = new Color(255, 255, 102);
    //--------------------------------------------
    //a Visitar ----------------------------------
    Color toVisitGreen = new Color(144,238,144);
    Color toVisitRed = new Color(255,160,122);
    Color toVisitBlue = new Color(32,178,170);
    Color toVisitBrown = new Color(244,164,96);
    Color tovisitYellow = new Color(255, 255, 153);
    //--------------------------------------------
    
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        coordPartida[0] = 0;
        coordPartida[1] = 0;
        coordChegada[0] = 0;
        coordChegada[1] = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rgMetodoBusca = new javax.swing.ButtonGroup();
        map = new model.Map();
        PanelAddTerrain = new javax.swing.JPanel();
        cbTerreno = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        bt_debug = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        btQntdx = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        btDefinirPartida = new javax.swing.JToggleButton();
        btDefinirChegada = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        Profundidade = new javax.swing.JRadioButton();
        Largura = new javax.swing.JRadioButton();
        Astar = new javax.swing.JRadioButton();
        btBuscar = new javax.swing.JButton();
        CMaisFacil = new javax.swing.JRadioButton();
        label_detalhes = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        map.setPreferredSize(new java.awt.Dimension(500, 500));
        map.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mapMouseDragged(evt);
            }
        });
        map.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mapLayout = new javax.swing.GroupLayout(map);
        map.setLayout(mapLayout);
        mapLayout.setHorizontalGroup(
            mapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        mapLayout.setVerticalGroup(
            mapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        PanelAddTerrain.setBorder(javax.swing.BorderFactory.createTitledBorder("Editar Mapa"));

        cbTerreno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Grama", "Montanha", "Agua", "Lava", "Orc" }));
        cbTerreno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTerrenoActionPerformed(evt);
            }
        });

        jLabel1.setText("Obstaculos:");

        jButton2.setText("Limpar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Mostrar Valores");

        bt_debug.setText("Desativado");
        bt_debug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_debugActionPerformed(evt);
            }
        });

        jLabel3.setText("Nº celulas (X*Y)");

        btQntdx.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));
        btQntdx.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btQntdxStateChanged(evt);
            }
        });

        javax.swing.GroupLayout PanelAddTerrainLayout = new javax.swing.GroupLayout(PanelAddTerrain);
        PanelAddTerrain.setLayout(PanelAddTerrainLayout);
        PanelAddTerrainLayout.setHorizontalGroup(
            PanelAddTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAddTerrainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addGroup(PanelAddTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btQntdx, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(PanelAddTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelAddTerrainLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelAddTerrainLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelAddTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_debug))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelAddTerrainLayout.setVerticalGroup(
            PanelAddTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAddTerrainLayout.createSequentialGroup()
                .addGroup(PanelAddTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btQntdx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(PanelAddTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel4)
                    .addComponent(bt_debug)))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Partida / Chegada"));

        btDefinirPartida.setText("Definir Partida");
        btDefinirPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDefinirPartidaActionPerformed(evt);
            }
        });

        btDefinirChegada.setText("Definir Chegada");
        btDefinirChegada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDefinirChegadaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btDefinirPartida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btDefinirChegada)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btDefinirPartida)
                    .addComponent(btDefinirChegada))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Método de busca"));

        rgMetodoBusca.add(Profundidade);
        Profundidade.setText("Profundidade");
        Profundidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProfundidadeActionPerformed(evt);
            }
        });

        rgMetodoBusca.add(Largura);
        Largura.setText("Largura");
        Largura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LarguraActionPerformed(evt);
            }
        });

        rgMetodoBusca.add(Astar);
        Astar.setText("A*");
        Astar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AstarActionPerformed(evt);
            }
        });

        btBuscar.setText("Buscar");
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        CMaisFacil.setText("CMaisFacil");
        CMaisFacil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CMaisFacilActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Profundidade)
                            .addComponent(Largura)
                            .addComponent(Astar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE))
                    .addComponent(CMaisFacil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btBuscar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Astar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CMaisFacil)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Largura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Profundidade)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelAddTerrain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(map, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 23, Short.MAX_VALUE)
                                .addComponent(label_detalhes)
                                .addGap(254, 254, 254))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102))
                    .addComponent(map, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(PanelAddTerrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_detalhes)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        map.GenerateTiles();
        btDefinirChegada.setEnabled(true);
        btDefinirPartida.setEnabled(true);
        Profundidade.setEnabled(true);
        Largura.setEnabled(true);
        Astar.setEnabled(true);
        repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void mapMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapMouseDragged
        // TODO add your handling code here:
        int x = evt.getX() / map.getSizeXTile();
        int y = evt.getY() / map.getSizeYTile();
        
        Tile[][] tiles = map.getTiles();
        switch(cbTerreno.getSelectedIndex()){
            case 0:
                    tiles[x][y].setColor(green);
                    tiles[x][y].setCost(1);
                    break;
            case 1:
                    tiles[x][y].setColor(brown);
                    tiles[x][y].setCost(4);
                    break;
            case 2:
                    tiles[x][y].setColor(blue);
                    tiles[x][y].setCost(2);
                    break;
            case 3:
                    tiles[x][y].setColor(red);
                    tiles[x][y].setCost(8);
                    break;                    
            case 4:
                    tiles[x][y].setColor(yellow);
                    tiles[x][y].setCost(12);
                    break;
        }
        repaint();
    }//GEN-LAST:event_mapMouseDragged

    private void mapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapMouseClicked
        // TODO add your handling code here:
        int x = evt.getX() / map.getSizeXTile();
        int y = evt.getY() / map.getSizeYTile();
        
        Tile[][] tiles = map.getTiles();
        if(partida){
            tiles[coordPartida[0]][coordPartida[1]].setColor(green);
            tiles[x][y].setColor(black);
            coordPartida[0] = x;
            coordPartida[1] = y;
            btDefinirPartida.setSelected(false);
            partida = !partida;
        }
        else if(chegada){
            tiles[coordChegada[0]][coordChegada[1]].setColor(green);
            tiles[x][y].setColor(white);
            coordChegada[0] = x;
            coordChegada[1] = y;
            btDefinirChegada.setSelected(false);
            chegada = !chegada;
            calcularDistanciaHeuristica(tiles[coordChegada[0]][coordChegada[1]]);
        }
        else {
           switch(cbTerreno.getSelectedIndex()){
                case 0:
                        tiles[x][y].setColor(green);
                        tiles[x][y].setCost(1);
                        break;
                case 1:
                        tiles[x][y].setColor(brown);
                        tiles[x][y].setCost(4);
                        break;
                case 2:
                        tiles[x][y].setColor(blue);
                        tiles[x][y].setCost(2);
                        break;
                case 3:
                        tiles[x][y].setColor(red);
                        tiles[x][y].setCost(8);
                        break;
                case 4:
                        tiles[x][y].setColor(yellow);
                        tiles[x][y].setCost(12);
                        break;
            }
        }
        repaint();
    }//GEN-LAST:event_mapMouseClicked

    private void btDefinirPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDefinirPartidaActionPerformed
        // TODO add your handling code here:
        partida = !partida;
    }//GEN-LAST:event_btDefinirPartidaActionPerformed

    private void btDefinirChegadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDefinirChegadaActionPerformed
        // TODO add your handling code here:
        chegada = !chegada;
    }//GEN-LAST:event_btDefinirChegadaActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        // TODO add your handling code here:
        
        /*Fazer magica*/
        //new Thread(() -> {
            
            if(Profundidade.isSelected()){
                try {
                    BuscaProfundidade();
                    btDefinirChegada.setEnabled(false);
                    btDefinirPartida.setEnabled(false);
                    Largura.setEnabled(false);
                    Astar.setEnabled(false);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else if(Largura.isSelected()){
                try {
                    BuscaLargura();
                    Profundidade.setEnabled(false);
                    Astar.setEnabled(false);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else if(Astar.isSelected()){
                try {
                    BuscaAstar();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else if(CMaisFacil.isSelected()){
                try {
                    BuscaCMaisFacil();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }   
            }           
       // }).start();
        
    }//GEN-LAST:event_btBuscarActionPerformed
    
    
    private void bt_debugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_debugActionPerformed
        // TODO add your handling code here:
        debug = !debug;
        if(debug){
            map.EnableDebug();
            bt_debug.setText("Ativado");
           
        }else{
            map.DisableDebug();
            bt_debug.setText("Desativado");
        }
        repaint();
    }//GEN-LAST:event_bt_debugActionPerformed

    private void cbTerrenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTerrenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTerrenoActionPerformed

    private void CMaisFacilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CMaisFacilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CMaisFacilActionPerformed

    private void ProfundidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProfundidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProfundidadeActionPerformed

    private void AstarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AstarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AstarActionPerformed

    private void LarguraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LarguraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LarguraActionPerformed

    private void btQntdxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btQntdxStateChanged
        // TODO add your handling code here:
        // TODO add your handling code here:
        this.map.setSizeX((int) btQntdx.getValue());
        this.map.setSizeY((int) btQntdx.getValue());
        //this.map.setSizeXTile(map.getSizeX() / (int) btQntdX.getValue());
        //this.map.setSizeYTile(map.getSizeY() / (int) btQntdX.getValue());

        //map.setSizeX((int)btQntdX.getValue());
        repaint();
    }//GEN-LAST:event_btQntdxStateChanged

    
    public LinkedList<Tile> BuscaProfundidade() throws InterruptedException{
        long tempoInicial = System.currentTimeMillis();
        Stack<Tile> pilha = new Stack<>();
        LinkedList<Tile> visitados = new LinkedList<>();
        LinkedList<Tile> caminho = new LinkedList<>();
        ArrayList<Tile> vizinhos = new ArrayList<>();
        int nTilesVisitados = 0;
        
        Tile[][] tiles = map.getTiles();
        Tile norte = null, leste = null, sul = null, oeste = null, visitando, destino, vizinho;
        visitando = tiles[coordPartida[0]][coordPartida[1]];
        destino = tiles[coordChegada[0]][coordChegada[1]];
        
        pilha.push(visitando);     
        
        while(!pilha.empty()){
            visitando = pilha.pop();
            visitando.setVisited(true); 
            paintTile(visitando);
            nTilesVisitados++;
            if(visitando == destino){
                break;
            }
            vizinhos = map.getNeighbor(visitando);
            for(int i=vizinhos.size()-1; i>=0; i--){
                vizinho = vizinhos.get(i);
                paintTileToVisit(vizinho);
                if(!vizinho.isVisited()){
                    pilha.push(vizinho);
                    vizinho.setPai(visitando);
                    
                }
            }
            repaint();
            sleep(velocidadeAnimacao);
        }
        Tile t = destino;
        while(t.getPai() != null){
            caminho.addFirst(t);
            t = t.getPai();
        }
        printPath(caminho);
        long res= System.currentTimeMillis() - tempoInicial;
        presentResults(res,nTilesVisitados, calculateCost(caminho));
        return caminho;
    }
        
    public LinkedList<Tile> BuscaLargura() throws InterruptedException{
        long tempoInicial = System.currentTimeMillis();
        ArrayList<Tile> visitados = new ArrayList<>();
        ArrayList<Tile> aVisitar = new ArrayList<>();
        LinkedList<Tile> caminho = new LinkedList<>();
        ArrayList<Tile> vizinhos;
        int nTilesVisitados = 0;
        
        Tile[][] tiles = map.getTiles();
        Tile norte, leste, sul, oeste, visitando, destino;
        visitando = tiles[coordPartida[0]][coordPartida[1]];
        destino = tiles[coordChegada[0]][coordChegada[1]];
        
        aVisitar.add(visitando);
        
        while(!aVisitar.isEmpty()){
            visitando = aVisitar.get(0);
            vizinhos = map.getNeighbor(visitando);
            visitando.setVisited(true);
            paintTile(visitando);
            nTilesVisitados++;
            aVisitar.remove(0);
            visitados.add(visitando);
            //System.out.println("Visitando: "+ visitando);
            if(visitando == destino)
                break;
            
            for(Tile vizinho : vizinhos){
                if(!vizinho.isVisited()){
                    if(!aVisitar.contains(vizinho))
                        aVisitar.add(vizinho);
                    paintTileToVisit(vizinho);
                    vizinho.setPai(visitando);
                }
            }
            //System.out.println("aVisitar: "+ aVisitar.size());            
            repaint();
            //sleep(velocidadeAnimacao);
        }
        Tile t = destino;
        while(t.getPai() != null){
            caminho.addFirst(t);
            t = t.getPai();
        }
        //System.out.println("Caminho: -------------------------------------");
        printPath(caminho);
        
        long res= System.currentTimeMillis() - tempoInicial;
        presentResults(res,nTilesVisitados, calculateCost(caminho));
        return caminho;
    }
    
    public void calcularDistanciaHeuristica(Tile destino){
        Tile[][] tiles = map.getTiles();
        for(int i=0; i<map.getSizeY(); i++){
            for(int j=0; j<map.getSizeX(); j++){
                tiles[i][j].setHeuristicCost(destino);
            }
        }
    }
    
    public LinkedList<Tile> BuscaAstar() throws InterruptedException{
        long tempoInicial = System.currentTimeMillis();
        Tile[][] tiles = map.getTiles();
        PriorityQueue<Tile> fila = new PriorityQueue<>((Tile tile1,Tile tile2) -> tile1.compareTo(tile2));
        ArrayList<Tile> vizinhos;
        LinkedList<Tile> caminho = new LinkedList<>();
        int nTilesVisitados = 0;
        
        
        Tile visitando, destino;
        visitando = tiles[coordPartida[0]][coordPartida[1]];
        destino = tiles[coordChegada[0]][coordChegada[1]];
        
        fila.offer(visitando);
        
        calcularDistanciaHeuristica(destino);
        
        while(visitando != destino){
            visitando = fila.poll();
            //System.out.println("Visitando: "+ visitando);
            vizinhos = map.getNeighbor(visitando);
            nTilesVisitados++;
            
            if(visitando.isVisited())
                continue;
            
            for(Tile vizinho : vizinhos){
                if(!vizinho.isVisited()){
                    vizinho.setGlobalCost(visitando.getGlobalCost() + vizinho.getCost());
                    fila.offer(vizinho);
                    paintTileToVisit(vizinho);
                    vizinho.setPai(visitando);
                }
            }
            //System.out.println("fila: "+ fila.toString());
            //System.out.println("------------------------------------------------------------");
            visitando.setVisited(true);
            paintTile(visitando);
            repaint();
            //sleep(velocidadeAnimacao);
        }
        System.out.println("terminei");
        Tile t = destino;
        while(t.getPai() != null){
            caminho.addFirst(t);
            t = t.getPai();
        }
        //System.out.println("Caminho: -------------------------------------");
        printPath(caminho);
        
        long res= System.currentTimeMillis() - tempoInicial;
        presentResults(res,nTilesVisitados, calculateCost(caminho));
        return caminho;
    }
    
    public LinkedList<Tile> BuscaCMaisFacil()throws InterruptedException{
        long tempoInicial = System.currentTimeMillis();
        Tile[][] tiles = map.getTiles();
        PriorityQueue<Tile> fila = new PriorityQueue<>((Tile tile1,Tile tile2) -> tile1.compareTo(tile2));
        ArrayList<Tile> vizinhos;
        LinkedList<Tile> caminho = new LinkedList<>();
        int nTilesVisitados = 0;
        
        
        Tile visitando, destino;
        visitando = tiles[coordPartida[0]][coordPartida[1]];
        destino = tiles[coordChegada[0]][coordChegada[1]];
        
        fila.offer(visitando);
        
        calcularDistanciaHeuristica(destino);
        
        while(visitando != destino){
            visitando = fila.poll();
            //System.out.println("Visitando: "+ visitando);
            vizinhos = map.getNeighbor(visitando);
            nTilesVisitados++;
            
            if(visitando.isVisited())
                continue;
            
            for(Tile vizinho : vizinhos){
                if(!vizinho.isVisited()){
                    vizinho.setGlobalCost(visitando.getGlobalCost() + vizinho.getCost());
                    fila.offer(vizinho);
                    paintTileToVisit(vizinho);
                    vizinho.setPai(visitando);
                }
            }
            //System.out.println("fila: "+ fila.toString());
            //System.out.println("------------------------------------------------------------");
            visitando.setVisited(true);
            paintTile(visitando);
            repaint();
            //sleep(velocidadeAnimacao);
        }
        System.out.println("terminei");
        Tile t = destino;
        while(t.getPai() != null){
            caminho.addFirst(t);
            t = t.getPai();
        }
        //System.out.println("Caminho: -------------------------------------");
        printPath(caminho);
        
        long res= System.currentTimeMillis() - tempoInicial;
        presentResults(res,nTilesVisitados, calculateCost(caminho));
        return caminho;
    }
    
    public void presentResults(long timeCost,int costSearch ,int costPath){
        new Resultado(timeCost,costSearch, costPath).setVisible(true);
        //label_detalhes.setText("detalhes: custo da busca: "+ costSearch + " custo do caminho: "+ costPath);
    }
    
    public int calculateCost(LinkedList<Tile> caminho){
        int cost = 0;
        for(Tile t : caminho){
            cost += t.getCost();
        }
        return cost;
    }
    
    public void printPath(LinkedList<Tile> caminho) throws InterruptedException{
        for(Tile tile : caminho){
            //System.out.println(tile);
            paintPath(tile);
            repaint();
            sleep(velocidadeAnimacao);
        }
        
    }
    
    public void paintTileToVisit(Tile tile){
        
        //tile.setColor(visitedGreen);
        //if(tile.getColor().equals(black) && tile.getColor().equals(white)){
        if(tile.getColor().equals(green)){
            tile.setColor(toVisitGreen);
        }else if(tile.getColor().equals(red)){
            tile.setColor(toVisitRed);
        }else if(tile.getColor().equals(blue)){
            tile.setColor(toVisitBlue);
        }else if(tile.getColor().equals(brown)){
            tile.setColor(toVisitBrown);
        }else if(tile.getColor().equals(yellow)){
            tile.setColor(tovisitYellow);
        }
        //}
    }
    public void paintTile(Tile tile){
        
        //tile.setColor(visitedGreen);
        //if(tile.getColor().equals(black) && tile.getColor().equals(white)){
        if(tile.getColor().equals(toVisitGreen)){
            tile.setColor(visitedGreen);
        }else if(tile.getColor().equals(toVisitRed)){
            tile.setColor(visitedRed);
        }else if(tile.getColor().equals(toVisitBlue)){
            tile.setColor(visitedBlue);
        }else if(tile.getColor().equals(toVisitBrown)){
            tile.setColor(visitedBrown);
        }else if(tile.getColor().equals(tovisitYellow)){
            tile.setColor(visitedYellow);
        }
        //}
    }
    public void paintPath(Tile tile){
        
        //tile.setColor(visitedGreen);
        //if(tile.getColor().equals(black) && tile.getColor().equals(white)){
            if(tile.getColor().equals(visitedGreen)){
                tile.setColor(pathGreen);
            }else if(tile.getColor().equals(visitedRed)){
                tile.setColor(pathRed);
            }else if(tile.getColor().equals(visitedBlue))
                tile.setColor(pathBlue);
            else if(tile.getColor().equals(visitedBrown))
                tile.setColor(pathBrown);
            else if(tile.getColor().equals(visitedYellow))
                tile.setColor(pathYellow);
        //}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Astar;
    private javax.swing.JRadioButton CMaisFacil;
    private javax.swing.JRadioButton Largura;
    private javax.swing.JPanel PanelAddTerrain;
    private javax.swing.JRadioButton Profundidade;
    private javax.swing.JButton btBuscar;
    private javax.swing.JToggleButton btDefinirChegada;
    private javax.swing.JToggleButton btDefinirPartida;
    private javax.swing.JSpinner btQntdx;
    private javax.swing.JToggleButton bt_debug;
    private javax.swing.JComboBox cbTerreno;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel label_detalhes;
    private model.Map map;
    private javax.swing.ButtonGroup rgMetodoBusca;
    // End of variables declaration//GEN-END:variables

}
